name: Preparant per producci√≥
run-name: ${{ github.actor }} est√† pujant l'aplicaci√≥ a PROD üöÄ
on:
  push:
    branches:
      - main
jobs:
  Pujar-a-produccio-amb-SCP:
    runs-on: ubuntu-latest
    steps:
      - name: Obtenint el codi del respositori
        uses: actions/checkout@v4

      - name: Verificar variables de entorno
        run: |
          echo "PROD_USER: ${{ secrets.PROD_USER }}"
          echo "PROD_HOST: ${{ secrets.PROD_HOST }}"
          echo "PROD_KEY: ${{ secrets.PROD_KEY }}"

      - name: Preparar clau SSH amb permisos correctes
        run: |
          echo "${{ secrets.PROD_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem
          ls -la ~/prod_key.pem

      - name: Verificar conexi√≥n SSH
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "echo 'Conexi√≥n SSH exitosa'"

      # - name: Preparar archivos locales
      #   run: |
      #     cd ${{ github.workspace }}

      #     cd front/next/
      #     npm install
      #     npm run build

      #     mkdir -p ${{ github.workspace }}/deploy-package

      #     cd ../
      #     cp -r ./next/.next/standalone/.next ${{ github.workspace }}/deploy-package/
      #     cp -r ./next/.next/standalone/server.js ${{ github.workspace }}/deploy-package/
      #     cp -r ./next/.next/standalone/package.json ${{ github.workspace }}/deploy-package/
      #     cp -r ./next/.next/static ${{ github.workspace }}/deploy-package/

      #     echo "Action desplegant a produccio" > ${{ github.workspace }}/deploy-package/last_deploy.txt
      #     date >> ${{ github.workspace }}/deploy-package/last_deploy.txt

      #     cd ${{ github.workspace }}
      #     tar -czf deploy-package.tar.gz -C deploy-package

      - name: Preparar archivos locales
        run: |
          cd ${{ github.workspace }}
          
          # Navegar al directorio del proyecto front-end
          cd front/next/
          
          # Instalar dependencias y construir
          npm install
          npm run build
          
          # Crear directorio para los archivos a transferir
          mkdir -p ${{ github.workspace }}/deploy-package
          
          # Verificar que los directorios existen antes de copiar
          echo "Verificando estructura de directorios despu√©s del build..."
          ls -la ./next/.next/
          
          # Copiar archivos necesarios para la aplicaci√≥n
          # Aseg√∫rate de que estas rutas existen
          if [ -d "./next/.next/standalone" ]; then
            echo "Copiando archivos de standalone..."
            cp -r ./next/.next/standalone/.next ${{ github.workspace }}/deploy-package/ || echo "Error al copiar .next"
            cp ./next/.next/standalone/server.js ${{ github.workspace }}/deploy-package/ || echo "Error al copiar server.js"
            cp ./next/.next/standalone/package.json ${{ github.workspace }}/deploy-package/ || echo "Error al copiar package.json"
          else
            echo "¬°ADVERTENCIA! El directorio standalone no existe."
            # Usar la estructura regular de Next.js si standalone no existe
            cp -r ./next/.next ${{ github.workspace }}/deploy-package/ || echo "Error al copiar .next"
            cp ./next/package.json ${{ github.workspace }}/deploy-package/ || echo "Error al copiar package.json"
            # Crear un simple server.js si no existe
            echo "console.log('Iniciando servidor Next.js...'); require('next').default({ dev: false, dir: __dirname }).prepare().then(() => { const app = require('next').default({ dev: false, dir: __dirname }); const server = require('http').createServer(app.getRequestHandler()); server.listen(3000, (err) => { if (err) throw err; console.log('> Ready on http://localhost:3000'); }); }).catch((ex) => { console.error(ex.stack); process.exit(1); });" > ${{ github.workspace }}/deploy-package/server.js
          fi
          
          # Copiar archivos est√°ticos si existen
          if [ -d "./next/.next/static" ]; then
            echo "Copiando archivos est√°ticos..."
            cp -r ./next/.next/static ${{ github.workspace }}/deploy-package/ || echo "Error al copiar static"
          else
            echo "¬°ADVERTENCIA! El directorio static no existe."
          fi
          
          # Crear archivo de registro de despliegue
          echo "Action desplegant a produccio" > ${{ github.workspace }}/deploy-package/last_deploy.txt
          date >> ${{ github.workspace }}/deploy-package/last_deploy.txt
          
          # Verificar contenido del directorio antes de comprimir
          echo "Contenido del directorio deploy-package:"
          ls -la ${{ github.workspace }}/deploy-package/
          
          # Asegurarse de que el directorio no est√° vac√≠o antes de comprimir
          if [ -z "$(ls -A ${{ github.workspace }}/deploy-package/)" ]; then
            echo "¬°ERROR! El directorio deploy-package est√° vac√≠o. No se puede crear un archivo tar vac√≠o."
            exit 1
          fi
          
          # Comprimir para transferir m√°s r√°pido
          cd ${{ github.workspace }}
          tar -czf deploy-package.tar.gz -C deploy-package .
          
          # Verificar que el archivo tar se cre√≥ correctamente
          ls -la deploy-package.tar.gz

      - name: Limpiar directorio remoto
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "
            rm -rf /home/${{ secrets.PROD_USER }}/web/cinetix.daw.inspedralbes.cat/public_html/* &&
            echo 'Directorio remoto limpiado'
          "

      # - name: Copiar archivos al servidor remoto
      #   run: |
      #     scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ github.workspace }}/web/* ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/a23agunovnov/web/cinetix.daw.inspedralbes.cat/public_html/

      - name: Transferir y descomprimir archivos
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ github.workspace }}/deploy-package.tar.gz ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/${{ secrets.PROD_USER }}/web/cinetix.daw.inspedralbes.cat/public_html/
          
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "
            cd /home/${{ secrets.PROD_USER }}/web/cinetix.daw.inspedralbes.cat/public_html/ &&
            tar -xzf deploy-package.tar.gz &&
            rm deploy-package.tar.gz &&
            echo 'Archivos descomprimidos correctamente'
          "

      - name: Instalar dependencias y iniciar aplicaci√≥n
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "
            cd /home/${{ secrets.PROD_USER }}/web/cinetix.daw.inspedralbes.cat/public_html/ &&
            npm install --production &&
            if pgrep -f 'node server.js'; then
              echo 'Deteniendo proceso anterior...' &&
              pkill -f 'node server.js'
            fi &&
            nohup node server.js > app.log 2>&1 &
            echo 'Aplicaci√≥n iniciada en segundo plano'
          "

      # - name: Start application
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "/home/runner/prod_key.pem" ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "
      #       cd /home/a23agunovnov/web/cinetix.daw.inspedralbes.cat/public_html/ && npm start
      #     "

      - run: echo "üçè This job's status is ${{ job.status }}."
